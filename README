The Serial Servo Multiplexor

Under the GNU GPL! YAY!
Documentation Coming Soon!

I. Compileing and running the program  
II. How to talk to the Multiplexor
III. How to Hook up the servos
IV. How the program works
  A. Serial Communication
  B. Emulating PWM
V. Using serial pins as servos and internal programming


------------------------------------
I. Compiling and running the program
------------------------------------

  The program comes with a makefile included. This make file will compile the main.c into a useable file. In order to run the make file to compile it into a .hex file that can be uploaded to your AVR you will need to use the command in the terminal.
      $make hex
   This will generate a bunch of other files as well as a 'myproject.hex' which you will use to upload the program to your chip. The makefile by default compiles 'main.c' and gives you 'myproject.hex' but these settings can be changes inside of the makefile.
   In order for the makefile to work you will need the program 'avr-gcc'. In order to program the divice you will need a program 'avrdude'.
   
On Windows
  When you use windows you have to disable digital driver signiture enforcement in order to program a chip.
  
----------------------------------
II. How to talk to the Multiplexor
----------------------------------

  This version of the program uses a two byte method for communication to the multiplexor. The two different bytes are ID, which is the servo number, and VALUE, which is the new value to set the servo. The servo numbering starts at 1 instead of 0. This will prevent a null byte from ever being sent, and thus will prevent some systems from crashing. There are 18 servos thus there need to be five bits that store the ID Number (NUMn). This is becasue 2^4 < 18 < 2^5 or 16 < 18 < 32. The Rotation Value (ROTn) is the position that the servo should be in. That number is a value between 0 and 255, thus eight bits will hold it exactly. As a result we get:
  
  [----|----|----|NUM0|NUM1|NUM2|NUM3|NUM4] = ID Number Byte
  [ROT0|ROT1|ROT2|ROT3|ROT4|ROT5|ROT6|ROT7] = Rotation Number Byte
  
  This will not work perfectly however. Because there is no phisical way to differentiat between the ID Number Byte and the Rotaion Number Byte. If they are both set to the value 18 (00010010) then they look exactly the same. If the program ever starts thinkning that the ID Number Byte is the Rotation Number and the rotation number is the ID Number then all of the servos will go to a value between 0 and 18 and constantly jitter between them. So to fix this we need an identifier bit. This will be the first bit of both bytes. However we see that ROT0 is in the way of the first bit in the Rotation Number Byte, To fix this we can just move ROT0 to a bit in the ID Number Byte. After we do this bitshift and add the indentifier bit we get:
  [ 0  |ROT0|----|NUM0|NUM1|NUM2|NUM3|NUM4]
  [ 1  |ROT1|ROT2|ROT3|ROT4|ROT5|ROT6|ROT7]
  
  Once we do that we can celarly identify the wich one is the ID bit and which one is the rotation Number Byte simply by looking at the leftmost bit. The function to convert this back into the two distinct bytes on the multiplexor is very cheap too. So that is how you communicate with the arduino.
   ____________________________________________________________________________
  /    Bitshifting Code Example                                                \
  +----------------------------------------------------------------------------+
  | // Initilize the Bytes in memory                                           |
  | char IDByte; // a char is used because it is usually 1 byte long           |
  | char ROTByte;                                                              |
  |                                                                            |
  | // Set the Bytes equal to the desired value                                |
  | IDByte = <servo value 1-18>;                                               |
  | ROTByte = <rotation value 0-256>;                                          |
  |                                                                            |
  | // Bitshift the bytes                                                      |
  | IDByte &= (ROTByte & 0x80)>>1; // shift ROT0 to the right and add to NUM   |
  | ROTByte &= 0x80; // put a 1 in the spot where ROT0 used to be              |
  |                                                                            |
  | // Now the values are set and you can send them                            |
  | Serial.send(IDByte);                                                       |
  | Serial.send(ROTByte);                                                      |
  +----------------------------------------------------------------------------+
  
 
 
------------------------------
III. How to Hook Up the Servos
------------------------------ 

PB0 - (PCINT0/CLKO/ICP1)   + 1  (0000 0001) 0x01
PB1 - (PCINT1/OC1A)        + 2  (0000 0010) 0x02
PB2 - (PCINT2/SS/OC1B)     + 3  (0000 0100) 0x04
PB3 - (PCINT3/OC2A/MOSI)   + 4  (0000 1000) 0x08
PB4 - (PCINT4/MISO)        + 5  (0001 0000) 0x10
PB5 - (SCK/PCINT5)         + 6  (0010 0000) 0x20
PB6 - (PCINT6/XTAL1/TOSC1
PB7 - (PCINT7/XTAL2/TOSC2)

PC0 - (ADC0/PCINT8)        + 7  (0000 0001) 0x01
PC1 - (ADC1/PCINT9)        + 8  (0000 0010) 0x02
PC2 - (ADC2/PCINT10)       + 9  (0000 0100) 0x04
PC3 - (ADC3/PCINT11)       + 10 (0000 1000) 0x08
PC4 - (ADC4/SDA/PCINT12)   + 11 (0001 0000) 0x10
PC5 - (ADC5/SCL/PCINT13)   + 12 (0010 0000) 0x20
PC6 - (RESET/PCINT14)      x
PC7 - -------------------- x

PD0 - (RXD/PCINT16)        x
PD1 - (TXD/PCINT17)        x
PD2 - (INT0/PCINT18)       + 13 (0000 0100) 0x04
PD3 - (PCINT19/OC2B/INT1)  + 14 (0000 1000) 0x08
PD4 - (PCINT20/XCK/T0)     + 15 (0001 0000) 0x10
PD5 - (PCINT21/OC0B/T1)    + 16 (0010 0000) 0x20
PD6 - (PCINT22/OC0A/AIN0)  + 17 (0100 0000) 0x40
PD7 - (PCINT23/AIN0)       + 18 (1000 0000) 0x80


--------------------------
IV. How the program works
--------------------------
  
  Serial communication
  
  The serial communication is done via basic USART functions for the AVR. The main build uses the settings for and ATMega328 (or any ATMEGAx8 chip). When it receives a serial message
  
  
  
  
  
  
  
  
  Emulating PWM
  
--------------------------------------------------------
V. Using serial pins as servos and internal programming
--------------------------------------------------------
  Due to the nature of the AVR the two pins that function as serial can also function as digital IO. So it is possible that you can not use the serial commands and instead use an internal program. Do to a the interrupt program, every 20 miliseconds there is a 2 milisecond gap where the interrupt function runs. Therefore effectively slowing down the program computation by 10% while keeping the clock rate the same. As a result you will need to write your code such that it is able to run in the ammount of time you have.
  You can also re-set fuses such that the 'reset' button can also be used as a digital IO in order to use it for the PWM. 
  
  
  
  
  
  
