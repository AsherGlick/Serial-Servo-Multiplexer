GAS LISTING /tmp/ccAMtjZ3.s 			page 1


   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/home/elhim/Desktop/code/AVR/c/hexapodServoControler/",100,0,2,.Ltext0
  11               		.stabs	"main.c",100,0,2,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,1,0
  16               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,1,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,1,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,1,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,1,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,1,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,1,0
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,1,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,1,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,1,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,1,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,1,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,1,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,1,0
  29               		.stabs	"void:t(0,15)=(0,15)",128,0,1,0
  30               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/io.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/inttypes.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/stdint.h",130,0,0,0
  34               		.stabs	"int8_t:t(4,1)=(0,10)",128,0,121,0
  35               		.stabs	"uint8_t:t(4,2)=(0,11)",128,0,122,0
  36               		.stabs	"int16_t:t(4,3)=(0,1)",128,0,123,0
  37               		.stabs	"uint16_t:t(4,4)=(0,4)",128,0,124,0
  38               		.stabs	"int32_t:t(4,5)=(0,3)",128,0,125,0
  39               		.stabs	"uint32_t:t(4,6)=(0,5)",128,0,126,0
  40               		.stabs	"int64_t:t(4,7)=(0,6)",128,0,128,0
  41               		.stabs	"uint64_t:t(4,8)=(0,7)",128,0,129,0
  42               		.stabs	"intptr_t:t(4,9)=(4,3)",128,0,142,0
  43               		.stabs	"uintptr_t:t(4,10)=(4,4)",128,0,147,0
  44               		.stabs	"int_least8_t:t(4,11)=(4,1)",128,0,159,0
  45               		.stabs	"uint_least8_t:t(4,12)=(4,2)",128,0,164,0
  46               		.stabs	"int_least16_t:t(4,13)=(4,3)",128,0,169,0
  47               		.stabs	"uint_least16_t:t(4,14)=(4,4)",128,0,174,0
  48               		.stabs	"int_least32_t:t(4,15)=(4,5)",128,0,179,0
  49               		.stabs	"uint_least32_t:t(4,16)=(4,6)",128,0,184,0
  50               		.stabs	"int_least64_t:t(4,17)=(4,7)",128,0,192,0
  51               		.stabs	"uint_least64_t:t(4,18)=(4,8)",128,0,199,0
  52               		.stabs	"int_fast8_t:t(4,19)=(4,1)",128,0,213,0
  53               		.stabs	"uint_fast8_t:t(4,20)=(4,2)",128,0,218,0
  54               		.stabs	"int_fast16_t:t(4,21)=(4,3)",128,0,223,0
  55               		.stabs	"uint_fast16_t:t(4,22)=(4,4)",128,0,228,0
  56               		.stabs	"int_fast32_t:t(4,23)=(4,5)",128,0,233,0
  57               		.stabs	"uint_fast32_t:t(4,24)=(4,6)",128,0,238,0
GAS LISTING /tmp/ccAMtjZ3.s 			page 2


  58               		.stabs	"int_fast64_t:t(4,25)=(4,7)",128,0,246,0
  59               		.stabs	"uint_fast64_t:t(4,26)=(4,8)",128,0,253,0
  60               		.stabs	"intmax_t:t(4,27)=(4,7)",128,0,273,0
  61               		.stabs	"uintmax_t:t(4,28)=(4,8)",128,0,278,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"int_farptr_t:t(3,1)=(4,5)",128,0,77,0
  64               		.stabs	"uint_farptr_t:t(3,2)=(4,6)",128,0,81,0
  65               		.stabn	162,0,0,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/fuse.h",130,0,0,0
  68               		.stabs	"__fuse_t:t(5,1)=(5,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,239,0
  69               		.stabn	162,0,0,0
  70               		.stabn	162,0,0,0
  71               		.stabs	"__vector_11:F(0,15)",36,0,65,__vector_11
  72               	.global	__vector_11
  73               		.type	__vector_11, @function
  74               	__vector_11:
  75               		.stabd	46,0,0
   0:main.c        **** /***********************************************************************\
   1:main.c        **** | Serial Servo Multiplexer                                               |
   2:main.c        **** | Copyright (C) 2011  Asher Glick                                       |
   3:main.c        **** |                                                                       |
   4:main.c        **** | This program is free software: you can redistribute it and/or modify  |
   5:main.c        **** | it under the terms of the GNU General Public License as published by  |
   6:main.c        **** | the Free Software Foundation, either version 3 of the License, or     |
   7:main.c        **** | (at your option) any later version.                                   |
   8:main.c        **** |                                                                       |
   9:main.c        **** | This program is distributed in the hope that it will be useful,       |
  10:main.c        **** | but WITHOUT ANY WARRANTY; without even the implied warranty of        |
  11:main.c        **** | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         |
  12:main.c        **** | GNU General Public License for more details.                          |
  13:main.c        **** |                                                                       |
  14:main.c        **** | You should have received a copy of the GNU General Public License     |
  15:main.c        **** | along with this program.  If not, see <http://www.gnu.org/licenses/>. |
  16:main.c        **** \***********************************************************************/
  17:main.c        **** 
  18:main.c        **** /****************** CHIP SETTINGS ******************\
  19:main.c        **** | This program was designed to run on an ATMEGA328  |
  20:main.c        **** | chip running with an external clock at 8MHz       |
  21:main.c        **** \***************************************************/
  22:main.c        **** 
  23:main.c        **** /********** FUSE SETTINGS **********\
  24:main.c        **** |   Low Fuse 0xE2                   |
  25:main.c        **** |  High Fuse 0xD9                   |       +- AVRDUDE COMMANDS -+
  26:main.c        **** | Extra Fuse 0x07                   |       | -U lfuse:w:0xe0:m  |
  27:main.c        **** |                                   |       | -U hfuse:w:0xd9:m  |
  28:main.c        **** | These fuse calculations are       |       | -U efuse:w:0xff:m  |
  29:main.c        **** | based off of the usbtiny AVR      |       +--------------------+
  30:main.c        **** | programmer. Other programmers     |
  31:main.c        **** | may have a different fuse number  |
  32:main.c        **** \***********************************/
  33:main.c        **** 
  34:main.c        **** /************************** AVRDUDE command for 8MHz **************************\ 
  35:main.c        **** | sudo avrdude -p m328p -c usbtiny -U flash:w:myproject.hex                    |
  36:main.c        **** |                       -U lfuse:w:0xE2:m -U hfuse:w:0xD9:m -U efuse:w:0x07:m  |
  37:main.c        **** |                                                                              |
  38:main.c        **** | NOTE: when messing with fuses, do this at your own risk. These fuses for the |
GAS LISTING /tmp/ccAMtjZ3.s 			page 3


  39:main.c        **** |        ATMEGA328P (ATMEGA328) worked for me, however if they do not work for |
  40:main.c        **** |        you, it is not my fault                                               |
  41:main.c        **** | NOTE: '-c usbtiny' is incorrect if you are using a different programmer      |
  42:main.c        **** \******************************************************************************/
  43:main.c        **** 
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        **** #include <avr/io.h>
  47:main.c        **** #include <avr/interrupt.h>
  48:main.c        **** 
  49:main.c        **** volatile char bport[255];
  50:main.c        **** volatile char cport[255];
  51:main.c        **** volatile char dport[255];
  52:main.c        **** 
  53:main.c        **** //servo define values
  54:main.c        **** volatile char servo_add [18];
  55:main.c        **** volatile char servo_sub [18]; 
  56:main.c        **** volatile char * servo_port [18];
  57:main.c        **** volatile int servo_pos [18];
  58:main.c        ****  
  59:main.c        **** 
  60:main.c        **** 
  61:main.c        **** /************************* TIMER1 COMPARE A INTERRUPT *************************\
  62:main.c        **** | 
  63:main.c        **** \******************************************************************************/
  64:main.c        **** ISR(TIMER1_COMPA_vect) {
  76               		.stabn	68,0,65,.LM0-.LFBB1
  77               	.LM0:
  78               	.LFBB1:
  79 0000 1F92      		push __zero_reg__
  80 0002 0F92      		push r0
  81 0004 0FB6      		in r0,__SREG__
  82 0006 0F92      		push r0
  83 0008 1124      		clr __zero_reg__
  84 000a 2F93      		push r18
  85 000c 3F93      		push r19
  86 000e 4F93      		push r20
  87 0010 5F93      		push r21
  88 0012 6F93      		push r22
  89 0014 7F93      		push r23
  90 0016 8F93      		push r24
  91 0018 9F93      		push r25
  92 001a AF93      		push r26
  93 001c BF93      		push r27
  94 001e EF93      		push r30
  95 0020 FF93      		push r31
  96               	/* prologue: Signal */
  97               	/* frame size = 0 */
  65:main.c        ****   // run through all cycles
  66:main.c        ****   int i ;
  67:main.c        ****   PORTB = 0xFF;
  98               		.stabn	68,0,68,.LM1-.LFBB1
  99               	.LM1:
 100 0022 8FEF      		ldi r24,lo8(-1)
 101 0024 85B9      		out 37-32,r24
  68:main.c        ****   PORTC = 0xFF;
 102               		.stabn	68,0,69,.LM2-.LFBB1
GAS LISTING /tmp/ccAMtjZ3.s 			page 4


 103               	.LM2:
 104 0026 88B9      		out 40-32,r24
  69:main.c        ****   PORTD = 0xFF;
 105               		.stabn	68,0,70,.LM3-.LFBB1
 106               	.LM3:
 107 0028 8BB9      		out 43-32,r24
 108 002a 60E0      		ldi r22,lo8(0)
 109 002c 70E0      		ldi r23,hi8(0)
 110 002e 28EE      		ldi r18,lo8(1000)
 111 0030 33E0      		ldi r19,hi8(1000)
 112 0032 40E0      		ldi r20,hlo8(1000)
 113 0034 50E0      		ldi r21,hhi8(1000)
 114               	.L3:
 115               	.LBB5:
  70:main.c        ****   for (i = 0; i<256; i++) {
  71:main.c        ****     PORTB &= bport[i];
 116               		.stabn	68,0,72,.LM4-.LFBB1
 117               	.LM4:
 118 0036 95B1      		in r25,37-32
 119 0038 FB01      		movw r30,r22
 120 003a E050      		subi r30,lo8(-(bport))
 121 003c F040      		sbci r31,hi8(-(bport))
 122 003e 8081      		ld r24,Z
 123 0040 8923      		and r24,r25
 124 0042 85B9      		out 37-32,r24
  72:main.c        ****     PORTC &= cport[i];
 125               		.stabn	68,0,73,.LM5-.LFBB1
 126               	.LM5:
 127 0044 98B1      		in r25,40-32
 128 0046 FB01      		movw r30,r22
 129 0048 E050      		subi r30,lo8(-(cport))
 130 004a F040      		sbci r31,hi8(-(cport))
 131 004c 8081      		ld r24,Z
 132 004e 8923      		and r24,r25
 133 0050 88B9      		out 40-32,r24
  73:main.c        ****     PORTD &= dport[i];
 134               		.stabn	68,0,74,.LM6-.LFBB1
 135               	.LM6:
 136 0052 9BB1      		in r25,43-32
 137 0054 FB01      		movw r30,r22
 138 0056 E050      		subi r30,lo8(-(dport))
 139 0058 F040      		sbci r31,hi8(-(dport))
 140 005a 8081      		ld r24,Z
 141 005c 8923      		and r24,r25
 142 005e 8BB9      		out 43-32,r24
 143               	.L2:
  74:main.c        ****     // calculate
  75:main.c        ****     long newtime = (1000) + i*(1000/256);    
  76:main.c        ****     // wait here untill the next cycle should start
  77:main.c        ****     while (TCNT1 < newtime);
 144               		.stabn	68,0,78,.LM7-.LFBB1
 145               	.LM7:
 146 0060 8091 8400 		lds r24,132
 147 0064 9091 8500 		lds r25,(132)+1
 148 0068 A0E0      		ldi r26,lo8(0)
 149 006a B0E0      		ldi r27,hi8(0)
 150 006c 8217      		cp r24,r18
GAS LISTING /tmp/ccAMtjZ3.s 			page 5


 151 006e 9307      		cpc r25,r19
 152 0070 A407      		cpc r26,r20
 153 0072 B507      		cpc r27,r21
 154 0074 04F0      		brlt .L2
 155               	.LBE5:
  71:main.c        ****   for (i = 0; i<256; i++) {
 156               		.stabn	68,0,71,.LM8-.LFBB1
 157               	.LM8:
 158 0076 6F5F      		subi r22,lo8(-(1))
 159 0078 7F4F      		sbci r23,hi8(-(1))
 160 007a 2D5F      		subi r18,lo8(-(3))
 161 007c 3F4F      		sbci r19,hi8(-(3))
 162 007e 4F4F      		sbci r20,hlo8(-(3))
 163 0080 5F4F      		sbci r21,hhi8(-(3))
 164 0082 81E0      		ldi r24,hi8(256)
 165 0084 6030      		cpi r22,lo8(256)
 166 0086 7807      		cpc r23,r24
 167 0088 01F4      		brne .L3
 168               	/* epilogue start */
  78:main.c        ****   }
  79:main.c        **** }
 169               		.stabn	68,0,80,.LM9-.LFBB1
 170               	.LM9:
 171 008a FF91      		pop r31
 172 008c EF91      		pop r30
 173 008e BF91      		pop r27
 174 0090 AF91      		pop r26
 175 0092 9F91      		pop r25
 176 0094 8F91      		pop r24
 177 0096 7F91      		pop r23
 178 0098 6F91      		pop r22
 179 009a 5F91      		pop r21
 180 009c 4F91      		pop r20
 181 009e 3F91      		pop r19
 182 00a0 2F91      		pop r18
 183 00a2 0F90      		pop r0
 184 00a4 0FBE      		out __SREG__,r0
 185 00a6 0F90      		pop r0
 186 00a8 1F90      		pop __zero_reg__
 187 00aa 1895      		reti
 188               		.size	__vector_11, .-__vector_11
 189               		.stabs	"i:r(0,1)",64,0,67,22
 190               		.stabn	192,0,0,.LFBB1-.LFBB1
 191               		.stabn	224,0,0,.Lscope1-.LFBB1
 192               	.Lscope1:
 193               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 194               		.stabd	78,0,0
 195               		.stabs	"wait:F(0,15)",36,0,85,wait
 196               		.stabs	"time:P(0,5)",64,0,85,22
 197               	.global	wait
 198               		.type	wait, @function
 199               	wait:
 200               		.stabd	46,0,0
  80:main.c        **** 
  81:main.c        **** /************************************ WAIT ************************************\
  82:main.c        **** | A generic wait function                                                      |
  83:main.c        **** \******************************************************************************/
GAS LISTING /tmp/ccAMtjZ3.s 			page 6


  84:main.c        **** void wait (unsigned long time) {
 201               		.stabn	68,0,85,.LM10-.LFBB2
 202               	.LM10:
 203               	.LFBB2:
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               		.stabn	68,0,85,.LM11-.LFBB2
 207               	.LM11:
 208 00ac 20E0      		ldi r18,lo8(0)
 209 00ae 30E0      		ldi r19,hi8(0)
 210 00b0 40E0      		ldi r20,hlo8(0)
 211 00b2 50E0      		ldi r21,hhi8(0)
 212 00b4 00C0      		rjmp .L8
 213               	.L9:
  85:main.c        ****   long i;
  86:main.c        ****   for (i = 0; i < time; i++) {
  87:main.c        ****     asm volatile ("nop");
 214               		.stabn	68,0,88,.LM12-.LFBB2
 215               	.LM12:
 216               	/* #APP */
 217               	 ;  88 "main.c" 1
 218 00b6 0000      		nop
 219               	 ;  0 "" 2
  87:main.c        ****     asm volatile ("nop");
 220               		.stabn	68,0,87,.LM13-.LFBB2
 221               	.LM13:
 222               	/* #NOAPP */
 223 00b8 2F5F      		subi r18,lo8(-(1))
 224 00ba 3F4F      		sbci r19,hi8(-(1))
 225 00bc 4F4F      		sbci r20,hlo8(-(1))
 226 00be 5F4F      		sbci r21,hhi8(-(1))
 227               	.L8:
 228 00c0 2617      		cp r18,r22
 229 00c2 3707      		cpc r19,r23
 230 00c4 4807      		cpc r20,r24
 231 00c6 5907      		cpc r21,r25
 232 00c8 00F0      		brlo .L9
 233               	/* epilogue start */
  88:main.c        ****   }
  89:main.c        **** }
 234               		.stabn	68,0,90,.LM14-.LFBB2
 235               	.LM14:
 236 00ca 0895      		ret
 237               		.size	wait, .-wait
 238               		.stabs	"i:r(0,3)",64,0,86,18
 239               		.stabn	192,0,0,.LFBB2-.LFBB2
 240               		.stabn	224,0,0,.Lscope2-.LFBB2
 241               	.Lscope2:
 242               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 243               		.stabd	78,0,0
 244               		.stabs	"main:F(0,1)",36,0,102,main
 245               	.global	main
 246               		.type	main, @function
 247               	main:
 248               		.stabd	46,0,0
  90:main.c        **** 
  91:main.c        **** void USART_Init(void);
GAS LISTING /tmp/ccAMtjZ3.s 			page 7


  92:main.c        **** void USART_Transmit( int input );
  93:main.c        **** 
  94:main.c        **** /******************************* MAIN FUNCTION *******************************\
  95:main.c        **** | The main function in this program mainly only handdles the serial input     |
  96:main.c        **** | However because the interrupt only runs for 10% of the program anything     |
  97:main.c        **** | that can be calculatied at a 90% effency at 8Mhz (effectively 7.2Mhz) then  |
  98:main.c        **** | it can be run on-chip, allowing the user to cut down on expences of other   |
  99:main.c        **** | devices to communicate with the chip.                                       |
 100:main.c        **** \*****************************************************************************/
 101:main.c        **** int main (void) {
 249               		.stabn	68,0,102,.LM15-.LFBB3
 250               	.LM15:
 251               	.LFBB3:
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 102:main.c        ****   int i = 0;
 103:main.c        ****   
 104:main.c        ****   // PIN INITILIZATION (TO FIX, all out should be able to be done)
 105:main.c        ****   DDRD = 0xFF;// 00000000 configure output on port D
 254               		.stabn	68,0,106,.LM16-.LFBB3
 255               	.LM16:
 256 00cc 8FEF      		ldi r24,lo8(-1)
 257 00ce 8AB9      		out 42-32,r24
 106:main.c        ****   DDRB = 0xFF;// 00011100 configure output on port B
 258               		.stabn	68,0,107,.LM17-.LFBB3
 259               	.LM17:
 260 00d0 84B9      		out 36-32,r24
 107:main.c        ****   DDRC = 0xFF;//                    output on port C
 261               		.stabn	68,0,108,.LM18-.LFBB3
 262               	.LM18:
 263 00d2 87B9      		out 39-32,r24
 108:main.c        ****   
 109:main.c        ****   // SERVO TIMER INITILIZATION
 110:main.c        ****   TCCR1B |= (1<<WGM12);
 264               		.stabn	68,0,111,.LM19-.LFBB3
 265               	.LM19:
 266 00d4 8091 8100 		lds r24,129
 267 00d8 8860      		ori r24,lo8(8)
 268 00da 8093 8100 		sts 129,r24
 111:main.c        ****   OCR1A = 20000;
 269               		.stabn	68,0,112,.LM20-.LFBB3
 270               	.LM20:
 271 00de 80E2      		ldi r24,lo8(20000)
 272 00e0 9EE4      		ldi r25,hi8(20000)
 273 00e2 9093 8900 		sts (136)+1,r25
 274 00e6 8093 8800 		sts 136,r24
 275 00ea 80E0      		ldi r24,lo8(0)
 276 00ec 90E0      		ldi r25,hi8(0)
 112:main.c        ****   
 113:main.c        ****   //Initlize Off Port Bits
 114:main.c        ****   for (i = 0 ; i < 256; i++) {
 115:main.c        ****     bport[i] = 0xFF;
 277               		.stabn	68,0,116,.LM21-.LFBB3
 278               	.LM21:
 279 00ee AFEF      		ldi r26,lo8(-1)
 280               	.L12:
 281 00f0 20E0      		ldi r18,lo8(bport)
GAS LISTING /tmp/ccAMtjZ3.s 			page 8


 282 00f2 30E0      		ldi r19,hi8(bport)
 283 00f4 FC01      		movw r30,r24
 284 00f6 E20F      		add r30,r18
 285 00f8 F31F      		adc r31,r19
 286 00fa A083      		st Z,r26
 116:main.c        ****     cport[i] = 0xFF;
 287               		.stabn	68,0,117,.LM22-.LFBB3
 288               	.LM22:
 289 00fc 40E0      		ldi r20,lo8(cport)
 290 00fe 50E0      		ldi r21,hi8(cport)
 291 0100 FC01      		movw r30,r24
 292 0102 E40F      		add r30,r20
 293 0104 F51F      		adc r31,r21
 294 0106 A083      		st Z,r26
 117:main.c        ****     dport[i] = 0xFF;
 295               		.stabn	68,0,118,.LM23-.LFBB3
 296               	.LM23:
 297 0108 60E0      		ldi r22,lo8(dport)
 298 010a 70E0      		ldi r23,hi8(dport)
 299 010c FC01      		movw r30,r24
 300 010e E60F      		add r30,r22
 301 0110 F71F      		adc r31,r23
 302 0112 A083      		st Z,r26
 115:main.c        ****   for (i = 0 ; i < 256; i++) {
 303               		.stabn	68,0,115,.LM24-.LFBB3
 304               	.LM24:
 305 0114 0196      		adiw r24,1
 306 0116 E1E0      		ldi r30,hi8(256)
 307 0118 8030      		cpi r24,lo8(256)
 308 011a 9E07      		cpc r25,r30
 309 011c 01F4      		brne .L12
 118:main.c        ****   }
 119:main.c        ****   bport[50] = 0x00;
 310               		.stabn	68,0,120,.LM25-.LFBB3
 311               	.LM25:
 312 011e 1092 0000 		sts bport+50,__zero_reg__
 120:main.c        ****   cport[200] = 0x00;
 313               		.stabn	68,0,121,.LM26-.LFBB3
 314               	.LM26:
 315 0122 1092 0000 		sts cport+200,__zero_reg__
 121:main.c        ****   dport[100] = 0x00;
 316               		.stabn	68,0,122,.LM27-.LFBB3
 317               	.LM27:
 318 0126 1092 0000 		sts dport+100,__zero_reg__
 122:main.c        ****   
 123:main.c        ****   // Initlize Servos
 124:main.c        ****   
 125:main.c        ****   // This is the servo add byte, when you & this value with a port byte it will
 126:main.c        ****   // add the 'servo off' bit to the port
 127:main.c        ****   // It turns the 1 to a 0 for a byte in the array
 128:main.c        ****   servo_add [0]  = !(1<<0);
 319               		.stabn	68,0,129,.LM28-.LFBB3
 320               	.LM28:
 321 012a 1092 0000 		sts servo_add,__zero_reg__
 129:main.c        ****   servo_add [1]  = !(1<<1);
 322               		.stabn	68,0,130,.LM29-.LFBB3
 323               	.LM29:
GAS LISTING /tmp/ccAMtjZ3.s 			page 9


 324 012e 1092 0000 		sts servo_add+1,__zero_reg__
 130:main.c        ****   servo_add [2]  = !(1<<2);
 325               		.stabn	68,0,131,.LM30-.LFBB3
 326               	.LM30:
 327 0132 1092 0000 		sts servo_add+2,__zero_reg__
 131:main.c        ****   servo_add [3]  = !(1<<3);
 328               		.stabn	68,0,132,.LM31-.LFBB3
 329               	.LM31:
 330 0136 1092 0000 		sts servo_add+3,__zero_reg__
 132:main.c        ****   servo_add [4]  = !(1<<4);
 331               		.stabn	68,0,133,.LM32-.LFBB3
 332               	.LM32:
 333 013a 1092 0000 		sts servo_add+4,__zero_reg__
 133:main.c        ****   servo_add [5]  = !(1<<5);
 334               		.stabn	68,0,134,.LM33-.LFBB3
 335               	.LM33:
 336 013e 1092 0000 		sts servo_add+5,__zero_reg__
 134:main.c        ****   servo_add [6]  = !(1<<0);
 337               		.stabn	68,0,135,.LM34-.LFBB3
 338               	.LM34:
 339 0142 1092 0000 		sts servo_add+6,__zero_reg__
 135:main.c        ****   servo_add [7]  = !(1<<1);
 340               		.stabn	68,0,136,.LM35-.LFBB3
 341               	.LM35:
 342 0146 1092 0000 		sts servo_add+7,__zero_reg__
 136:main.c        ****   servo_add [8]  = !(1<<2);
 343               		.stabn	68,0,137,.LM36-.LFBB3
 344               	.LM36:
 345 014a 1092 0000 		sts servo_add+8,__zero_reg__
 137:main.c        ****   servo_add [9]  = !(1<<3);
 346               		.stabn	68,0,138,.LM37-.LFBB3
 347               	.LM37:
 348 014e 1092 0000 		sts servo_add+9,__zero_reg__
 138:main.c        ****   servo_add [10] = !(1<<4);
 349               		.stabn	68,0,139,.LM38-.LFBB3
 350               	.LM38:
 351 0152 1092 0000 		sts servo_add+10,__zero_reg__
 139:main.c        ****   servo_add [11] = !(1<<5);
 352               		.stabn	68,0,140,.LM39-.LFBB3
 353               	.LM39:
 354 0156 1092 0000 		sts servo_add+11,__zero_reg__
 140:main.c        ****   servo_add [12] = !(1<<2);
 355               		.stabn	68,0,141,.LM40-.LFBB3
 356               	.LM40:
 357 015a 1092 0000 		sts servo_add+12,__zero_reg__
 141:main.c        ****   servo_add [13] = !(1<<3);
 358               		.stabn	68,0,142,.LM41-.LFBB3
 359               	.LM41:
 360 015e 1092 0000 		sts servo_add+13,__zero_reg__
 142:main.c        ****   servo_add [14] = !(1<<4);
 361               		.stabn	68,0,143,.LM42-.LFBB3
 362               	.LM42:
 363 0162 1092 0000 		sts servo_add+14,__zero_reg__
 143:main.c        ****   servo_add [15] = !(1<<5);
 364               		.stabn	68,0,144,.LM43-.LFBB3
 365               	.LM43:
 366 0166 1092 0000 		sts servo_add+15,__zero_reg__
GAS LISTING /tmp/ccAMtjZ3.s 			page 10


 144:main.c        ****   servo_add [16] = !(1<<6);
 367               		.stabn	68,0,145,.LM44-.LFBB3
 368               	.LM44:
 369 016a 1092 0000 		sts servo_add+16,__zero_reg__
 145:main.c        ****   servo_add [17] = !(1<<7);
 370               		.stabn	68,0,146,.LM45-.LFBB3
 371               	.LM45:
 372 016e 1092 0000 		sts servo_add+17,__zero_reg__
 146:main.c        ****   
 147:main.c        ****   
 148:main.c        ****   // This is the port that the servo is on. It is represented by a character pointer
 149:main.c        ****   // which happens to be the same as the array and can be use the same way
 150:main.c        ****   servo_port [0]  = bport;
 373               		.stabn	68,0,151,.LM46-.LFBB3
 374               	.LM46:
 375 0172 3093 0000 		sts (servo_port)+1,r19
 376 0176 2093 0000 		sts servo_port,r18
 151:main.c        ****   servo_port [1]  = bport;
 377               		.stabn	68,0,152,.LM47-.LFBB3
 378               	.LM47:
 379 017a 3093 0000 		sts (servo_port+2)+1,r19
 380 017e 2093 0000 		sts servo_port+2,r18
 152:main.c        ****   servo_port [2]  = bport;
 381               		.stabn	68,0,153,.LM48-.LFBB3
 382               	.LM48:
 383 0182 3093 0000 		sts (servo_port+4)+1,r19
 384 0186 2093 0000 		sts servo_port+4,r18
 153:main.c        ****   servo_port [3]  = bport;
 385               		.stabn	68,0,154,.LM49-.LFBB3
 386               	.LM49:
 387 018a 3093 0000 		sts (servo_port+6)+1,r19
 388 018e 2093 0000 		sts servo_port+6,r18
 154:main.c        ****   servo_port [4]  = bport;
 389               		.stabn	68,0,155,.LM50-.LFBB3
 390               	.LM50:
 391 0192 3093 0000 		sts (servo_port+8)+1,r19
 392 0196 2093 0000 		sts servo_port+8,r18
 155:main.c        ****   servo_port [5]  = bport;
 393               		.stabn	68,0,156,.LM51-.LFBB3
 394               	.LM51:
 395 019a 3093 0000 		sts (servo_port+10)+1,r19
 396 019e 2093 0000 		sts servo_port+10,r18
 156:main.c        ****   servo_port [6]  = cport;
 397               		.stabn	68,0,157,.LM52-.LFBB3
 398               	.LM52:
 399 01a2 5093 0000 		sts (servo_port+12)+1,r21
 400 01a6 4093 0000 		sts servo_port+12,r20
 157:main.c        ****   servo_port [7]  = cport;
 401               		.stabn	68,0,158,.LM53-.LFBB3
 402               	.LM53:
 403 01aa 5093 0000 		sts (servo_port+14)+1,r21
 404 01ae 4093 0000 		sts servo_port+14,r20
 158:main.c        ****   servo_port [8]  = cport;
 405               		.stabn	68,0,159,.LM54-.LFBB3
 406               	.LM54:
 407 01b2 5093 0000 		sts (servo_port+16)+1,r21
 408 01b6 4093 0000 		sts servo_port+16,r20
GAS LISTING /tmp/ccAMtjZ3.s 			page 11


 159:main.c        ****   servo_port [9]  = cport;
 409               		.stabn	68,0,160,.LM55-.LFBB3
 410               	.LM55:
 411 01ba 5093 0000 		sts (servo_port+18)+1,r21
 412 01be 4093 0000 		sts servo_port+18,r20
 160:main.c        ****   servo_port [10] = cport;
 413               		.stabn	68,0,161,.LM56-.LFBB3
 414               	.LM56:
 415 01c2 5093 0000 		sts (servo_port+20)+1,r21
 416 01c6 4093 0000 		sts servo_port+20,r20
 161:main.c        ****   servo_port [11] = cport;
 417               		.stabn	68,0,162,.LM57-.LFBB3
 418               	.LM57:
 419 01ca 5093 0000 		sts (servo_port+22)+1,r21
 420 01ce 4093 0000 		sts servo_port+22,r20
 162:main.c        ****   servo_port [12] = dport;
 421               		.stabn	68,0,163,.LM58-.LFBB3
 422               	.LM58:
 423 01d2 7093 0000 		sts (servo_port+24)+1,r23
 424 01d6 6093 0000 		sts servo_port+24,r22
 163:main.c        ****   servo_port [13] = dport;
 425               		.stabn	68,0,164,.LM59-.LFBB3
 426               	.LM59:
 427 01da 7093 0000 		sts (servo_port+26)+1,r23
 428 01de 6093 0000 		sts servo_port+26,r22
 164:main.c        ****   servo_port [14] = dport;
 429               		.stabn	68,0,165,.LM60-.LFBB3
 430               	.LM60:
 431 01e2 7093 0000 		sts (servo_port+28)+1,r23
 432 01e6 6093 0000 		sts servo_port+28,r22
 165:main.c        ****   servo_port [15] = dport;
 433               		.stabn	68,0,166,.LM61-.LFBB3
 434               	.LM61:
 435 01ea 7093 0000 		sts (servo_port+30)+1,r23
 436 01ee 6093 0000 		sts servo_port+30,r22
 166:main.c        ****   servo_port [16] = dport;
 437               		.stabn	68,0,167,.LM62-.LFBB3
 438               	.LM62:
 439 01f2 7093 0000 		sts (servo_port+32)+1,r23
 440 01f6 6093 0000 		sts servo_port+32,r22
 167:main.c        ****   servo_port [17] = dport;  
 441               		.stabn	68,0,168,.LM63-.LFBB3
 442               	.LM63:
 443 01fa 7093 0000 		sts (servo_port+34)+1,r23
 444 01fe 6093 0000 		sts servo_port+34,r22
 445 0202 80E0      		ldi r24,lo8(0)
 446 0204 90E0      		ldi r25,hi8(0)
 447               	.L13:
 168:main.c        ****   
 169:main.c        ****   // set the initial positions
 170:main.c        ****   for (i = 0; i < 256; i ++) {
 171:main.c        ****     servo_pos [i]  = 0;
 448               		.stabn	68,0,172,.LM64-.LFBB3
 449               	.LM64:
 450 0206 FC01      		movw r30,r24
 451 0208 EE0F      		lsl r30
 452 020a FF1F      		rol r31
GAS LISTING /tmp/ccAMtjZ3.s 			page 12


 453 020c E050      		subi r30,lo8(-(servo_pos))
 454 020e F040      		sbci r31,hi8(-(servo_pos))
 455 0210 1182      		std Z+1,__zero_reg__
 456 0212 1082      		st Z,__zero_reg__
 171:main.c        ****     servo_pos [i]  = 0;
 457               		.stabn	68,0,171,.LM65-.LFBB3
 458               	.LM65:
 459 0214 0196      		adiw r24,1
 460 0216 21E0      		ldi r18,hi8(256)
 461 0218 8030      		cpi r24,lo8(256)
 462 021a 9207      		cpc r25,r18
 463 021c 01F4      		brne .L13
 464 021e 20E0      		ldi r18,lo8(0)
 465 0220 30E0      		ldi r19,hi8(0)
 466               	.L15:
 172:main.c        ****   }
 173:main.c        ****   
 174:main.c        ****   //set the subtract bytes
 175:main.c        ****   for (i = 0; i < 256; i ++) {
 176:main.c        ****     servo_sub[0] = !servo_add[0];
 467               		.stabn	68,0,177,.LM66-.LFBB3
 468               	.LM66:
 469 0222 8091 0000 		lds r24,servo_add
 470 0226 90E0      		ldi r25,lo8(0)
 471 0228 8823      		tst r24
 472 022a 01F4      		brne .L14
 473 022c 91E0      		ldi r25,lo8(1)
 474               	.L14:
 475 022e 9093 0000 		sts servo_sub,r25
 176:main.c        ****     servo_sub[0] = !servo_add[0];
 476               		.stabn	68,0,176,.LM67-.LFBB3
 477               	.LM67:
 478 0232 2F5F      		subi r18,lo8(-(1))
 479 0234 3F4F      		sbci r19,hi8(-(1))
 480 0236 81E0      		ldi r24,hi8(256)
 481 0238 2030      		cpi r18,lo8(256)
 482 023a 3807      		cpc r19,r24
 483 023c 01F4      		brne .L15
 484               	.LBB6:
 485               	.LBB7:
 177:main.c        ****   }
 178:main.c        ****   // USART INITILIZATION
 179:main.c        ****   USART_Init();
 180:main.c        ****   
 181:main.c        ****   //INTERRUPT INITILAIZATION
 182:main.c        ****   sei ();       // enable global interrupts
 183:main.c        ****   TIMSK1 |= (1<<OCIE1A);
 184:main.c        ****   
 185:main.c        ****   //begin timer
 186:main.c        ****   TCCR1B |= (1<<CS11);
 187:main.c        ****   
 188:main.c        ****   //MAIN LOOP
 189:main.c        ****   while (1) {
 190:main.c        ****     char servnum = 0xFF; // bit one is the servo number byte (leading 0)
 191:main.c        ****     char servpos; // byte two is the new position (leading 1)
 192:main.c        ****     while (servnum&0x80) {
 193:main.c        ****       while ( !(UCSR0A & (1<<RXC0))); // Wait for input
GAS LISTING /tmp/ccAMtjZ3.s 			page 13


 194:main.c        ****       servnum = UDR0;
 195:main.c        ****     }
 196:main.c        ****     while ( !(UCSR0A & (1<<RXC0))); // Wait for input for position
 197:main.c        ****     servpos = UDR0;
 198:main.c        ****     // Error check
 199:main.c        ****     if (!(servpos & 0x80)) {
 200:main.c        ****       continue;
 201:main.c        ****     }
 202:main.c        ****     // Parse input
 203:main.c        ****     servpos = (servpos & ((servnum & 0x40) << 1));
 204:main.c        ****     servnum = servnum & 0x1F;
 205:main.c        ****     servnum = servnum - 1; // the first servo is servo 
 206:main.c        ****     // Analize input
 207:main.c        ****     
 208:main.c        ****     //servo_port[(int)servnum][(int)servo_pos[(int)servnum]] |= servo_sub[(int)servnum];
 209:main.c        ****     //servo_port[(int)servnum][(int)servpos] &= servo_add[(int)servnum]; 
 210:main.c        ****   }
 211:main.c        **** }
 212:main.c        **** 
 213:main.c        **** /******************************** USART CONFIG ********************************\
 214:main.c        **** | USART_Init(void) initilizes the USART feature, this function needs to be run |
 215:main.c        **** | before any USART functions are used, this function configures the BAUD rate  |
 216:main.c        **** | for the USART and enables the format for transmission                        |
 217:main.c        **** \******************************************************************************/
 218:main.c        **** #define FOSC 8000000 // Clock Speed of the procesor
 219:main.c        **** #define BAUD 19200    // Baud rate (to change the BAUD rate change this variable
 220:main.c        **** #define MYUBRR FOSC/16/BAUD-1 // calculate the number the processor needs
 221:main.c        **** void USART_Init(void) {
 222:main.c        ****   unsigned int ubrr = MYUBRR;
 223:main.c        ****   /*Set baud rate */
 224:main.c        ****   UBRR0H = (unsigned char)(ubrr>>8);
 486               		.stabn	68,0,225,.LM68-.LFBB3
 487               	.LM68:
 488 023e 1092 C500 		sts 197,__zero_reg__
 225:main.c        ****   UBRR0L = (unsigned char)ubrr;
 489               		.stabn	68,0,226,.LM69-.LFBB3
 490               	.LM69:
 491 0242 89E1      		ldi r24,lo8(25)
 492 0244 8093 C400 		sts 196,r24
 226:main.c        ****   /*Enable receiver and transmitter */
 227:main.c        ****   UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 493               		.stabn	68,0,228,.LM70-.LFBB3
 494               	.LM70:
 495 0248 88E1      		ldi r24,lo8(24)
 496 024a 8093 C100 		sts 193,r24
 228:main.c        ****   /* Set frame format: 8data, 2stop bit */
 229:main.c        ****   UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 497               		.stabn	68,0,230,.LM71-.LFBB3
 498               	.LM71:
 499 024e 8EE0      		ldi r24,lo8(14)
 500 0250 8093 C200 		sts 194,r24
 501               	.LBE7:
 502               	.LBE6:
 183:main.c        ****   sei ();       // enable global interrupts
 503               		.stabn	68,0,183,.LM72-.LFBB3
 504               	.LM72:
 505               	/* #APP */
GAS LISTING /tmp/ccAMtjZ3.s 			page 14


 506               	 ;  183 "main.c" 1
 507 0254 7894      		sei
 508               	 ;  0 "" 2
 184:main.c        ****   TIMSK1 |= (1<<OCIE1A);
 509               		.stabn	68,0,184,.LM73-.LFBB3
 510               	.LM73:
 511               	/* #NOAPP */
 512 0256 8091 6F00 		lds r24,111
 513 025a 8260      		ori r24,lo8(2)
 514 025c 8093 6F00 		sts 111,r24
 187:main.c        ****   TCCR1B |= (1<<CS11);
 515               		.stabn	68,0,187,.LM74-.LFBB3
 516               	.LM74:
 517 0260 8091 8100 		lds r24,129
 518 0264 8260      		ori r24,lo8(2)
 519 0266 8093 8100 		sts 129,r24
 520 026a 8FEF      		ldi r24,lo8(-1)
 521 026c 00C0      		rjmp .L27
 522               	.L20:
 523               	.LBB8:
 194:main.c        ****       while ( !(UCSR0A & (1<<RXC0))); // Wait for input
 524               		.stabn	68,0,194,.LM75-.LFBB3
 525               	.LM75:
 526 026e 8091 C000 		lds r24,192
 527 0272 87FF      		sbrs r24,7
 528 0274 00C0      		rjmp .L20
 195:main.c        ****       servnum = UDR0;
 529               		.stabn	68,0,195,.LM76-.LFBB3
 530               	.LM76:
 531 0276 8091 C600 		lds r24,198
 532               	.L27:
 193:main.c        ****     while (servnum&0x80) {
 533               		.stabn	68,0,193,.LM77-.LFBB3
 534               	.LM77:
 535 027a 87FD      		sbrc r24,7
 536 027c 00C0      		rjmp .L20
 537               	.L21:
 197:main.c        ****     while ( !(UCSR0A & (1<<RXC0))); // Wait for input for position
 538               		.stabn	68,0,197,.LM78-.LFBB3
 539               	.LM78:
 540 027e 8091 C000 		lds r24,192
 541 0282 87FF      		sbrs r24,7
 542 0284 00C0      		rjmp .L21
 198:main.c        ****     servpos = UDR0;
 543               		.stabn	68,0,198,.LM79-.LFBB3
 544               	.LM79:
 545 0286 8091 C600 		lds r24,198
 546 028a 00C0      		rjmp .L20
 547               	.LBE8:
 548               		.size	main, .-main
 549               		.stabs	"i:r(0,1)",64,0,103,24
 550               		.stabn	192,0,0,.LFBB3-.LFBB3
 551               		.stabs	"servnum:r(0,2)",64,0,191,24
 552               		.stabs	"servpos:r(0,2)",64,0,192,24
 553               		.stabn	192,0,0,.LBB8-.LFBB3
 554               		.stabn	224,0,0,.LBE8-.LFBB3
 555               		.stabn	224,0,0,.Lscope3-.LFBB3
GAS LISTING /tmp/ccAMtjZ3.s 			page 15


 556               	.Lscope3:
 557               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 558               		.stabd	78,0,0
 559               		.stabs	"USART_Init:F(0,15)",36,0,222,USART_Init
 560               	.global	USART_Init
 561               		.type	USART_Init, @function
 562               	USART_Init:
 563               		.stabd	46,0,0
 222:main.c        **** void USART_Init(void) {
 564               		.stabn	68,0,222,.LM80-.LFBB4
 565               	.LM80:
 566               	.LFBB4:
 567               	/* prologue: function */
 568               	/* frame size = 0 */
 225:main.c        ****   UBRR0H = (unsigned char)(ubrr>>8);
 569               		.stabn	68,0,225,.LM81-.LFBB4
 570               	.LM81:
 571 028c 1092 C500 		sts 197,__zero_reg__
 226:main.c        ****   UBRR0L = (unsigned char)ubrr;
 572               		.stabn	68,0,226,.LM82-.LFBB4
 573               	.LM82:
 574 0290 89E1      		ldi r24,lo8(25)
 575 0292 8093 C400 		sts 196,r24
 228:main.c        ****   UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 576               		.stabn	68,0,228,.LM83-.LFBB4
 577               	.LM83:
 578 0296 88E1      		ldi r24,lo8(24)
 579 0298 8093 C100 		sts 193,r24
 580               		.stabn	68,0,230,.LM84-.LFBB4
 581               	.LM84:
 582 029c 8EE0      		ldi r24,lo8(14)
 583 029e 8093 C200 		sts 194,r24
 584               	/* epilogue start */
 230:main.c        **** }
 585               		.stabn	68,0,231,.LM85-.LFBB4
 586               	.LM85:
 587 02a2 0895      		ret
 588               		.size	USART_Init, .-USART_Init
 589               	.Lscope4:
 590               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 591               		.stabd	78,0,0
 592               		.stabs	"USART_Transmit:F(0,15)",36,0,241,USART_Transmit
 593               		.stabs	"input:P(0,1)",64,0,240,18
 594               	.global	USART_Transmit
 595               		.type	USART_Transmit, @function
 596               	USART_Transmit:
 597               		.stabd	46,0,0
 231:main.c        **** 
 232:main.c        **** /******************************* USART_Transmit *******************************\
 233:main.c        **** | The USART_Transmit(int) function allows you to send numbers to USART serial  |
 234:main.c        **** | This function only handles numbers up to two digits. If there is one digit   |
 235:main.c        **** | the message contains a space, then the digit converted to ascii. If there    |
 236:main.c        **** | are two digits then the message is the first digit followed by the seccond   |
 237:main.c        **** | If the input is negative then the function will output a newline character   |
 238:main.c        **** \******************************************************************************/
 239:main.c        **** void USART_Transmit( int input )
 240:main.c        **** {
GAS LISTING /tmp/ccAMtjZ3.s 			page 16


 598               		.stabn	68,0,241,.LM86-.LFBB5
 599               	.LM86:
 600               	.LFBB5:
 601               	/* prologue: function */
 602               	/* frame size = 0 */
 603 02a4 9C01      		movw r18,r24
 241:main.c        ****   unsigned char data;
 242:main.c        ****   if (input == -1) {
 604               		.stabn	68,0,243,.LM87-.LFBB5
 605               	.LM87:
 606 02a6 8FEF      		ldi r24,hi8(-1)
 607 02a8 2F3F      		cpi r18,lo8(-1)
 608 02aa 3807      		cpc r19,r24
 609 02ac 01F4      		brne .L31
 610               	.L38:
 243:main.c        ****     while ( !( UCSR0A & (1<<UDRE0)) );
 611               		.stabn	68,0,244,.LM88-.LFBB5
 612               	.LM88:
 613 02ae 8091 C000 		lds r24,192
 614 02b2 85FF      		sbrs r24,5
 615 02b4 00C0      		rjmp .L38
 244:main.c        ****     // Put '\n' into the bufffer to send
 245:main.c        ****     UDR0 = '\r';
 616               		.stabn	68,0,246,.LM89-.LFBB5
 617               	.LM89:
 618 02b6 8DE0      		ldi r24,lo8(13)
 619 02b8 8093 C600 		sts 198,r24
 620               	.L33:
 246:main.c        ****     //dont continue running the function to prevent outputing E
 247:main.c        ****     // Wait for empty transmit buffer
 248:main.c        ****     while ( !( UCSR0A & (1<<UDRE0)) );
 621               		.stabn	68,0,249,.LM90-.LFBB5
 622               	.LM90:
 623 02bc 8091 C000 		lds r24,192
 624 02c0 85FF      		sbrs r24,5
 625 02c2 00C0      		rjmp .L33
 249:main.c        ****     // Put '\n' into the bufffer to send
 250:main.c        ****     UDR0 = '\n';
 626               		.stabn	68,0,251,.LM91-.LFBB5
 627               	.LM91:
 628 02c4 8AE0      		ldi r24,lo8(10)
 629 02c6 00C0      		rjmp .L43
 630               	.L31:
 251:main.c        ****     //dont continue running the function to prevent outputing E
 252:main.c        ****     return;
 253:main.c        ****   }
 254:main.c        ****   else if (input < 10 && input >= 0) {     
 631               		.stabn	68,0,255,.LM92-.LFBB5
 632               	.LM92:
 633 02c8 2A30      		cpi r18,10
 634 02ca 3105      		cpc r19,__zero_reg__
 635 02cc 00F4      		brsh .L35
 636               	.L39:
 255:main.c        ****     while ( !( UCSR0A & (1<<UDRE0)) );
 637               		.stabn	68,0,256,.LM93-.LFBB5
 638               	.LM93:
 639 02ce 8091 C000 		lds r24,192
GAS LISTING /tmp/ccAMtjZ3.s 			page 17


 640 02d2 85FF      		sbrs r24,5
 641 02d4 00C0      		rjmp .L39
 256:main.c        ****     data = '0' + input;
 642               		.stabn	68,0,257,.LM94-.LFBB5
 643               	.LM94:
 644 02d6 822F      		mov r24,r18
 645 02d8 805D      		subi r24,lo8(-(48))
 646 02da 00C0      		rjmp .L43
 647               	.L35:
 257:main.c        ****     UDR0 = data;
 258:main.c        ****   }
 259:main.c        ****   else {
 260:main.c        ****     // Output E if the number cannot be outputed
 261:main.c        ****     UDR0 = 'E';
 648               		.stabn	68,0,262,.LM95-.LFBB5
 649               	.LM95:
 650 02dc 85E4      		ldi r24,lo8(69)
 651               	.L43:
 652 02de 8093 C600 		sts 198,r24
 653 02e2 0895      		ret
 654               		.size	USART_Transmit, .-USART_Transmit
 655               		.stabs	"data:r(0,11)",64,0,242,24
 656               		.stabn	192,0,0,.LFBB5-.LFBB5
 657               		.stabn	224,0,0,.Lscope5-.LFBB5
 658               	.Lscope5:
 659               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 660               		.stabd	78,0,0
 661               		.comm bport,255,1
 662               		.comm cport,255,1
 663               		.comm dport,255,1
 664               		.comm servo_add,18,1
 665               		.comm servo_sub,18,1
 666               		.comm servo_port,36,1
 667               		.comm servo_pos,36,1
 668               		.stabs	"bport:G(0,16)=ar(0,17)=r(0,17);0;0177777;;0;254;(0,18)=B(0,2)",32,0,50,0
 669               		.stabs	"cport:G(0,16)",32,0,51,0
 670               		.stabs	"dport:G(0,16)",32,0,52,0
 671               		.stabs	"servo_add:G(0,19)=ar(0,17);0;17;(0,18)",32,0,55,0
 672               		.stabs	"servo_sub:G(0,19)",32,0,56,0
 673               		.stabs	"servo_port:G(0,20)=ar(0,17);0;17;(0,21)=*(0,18)",32,0,57,0
 674               		.stabs	"servo_pos:G(0,22)=ar(0,17);0;17;(0,23)=B(0,1)",32,0,58,0
 675               		.stabs	"",100,0,0,.Letext0
 676               	.Letext0:
GAS LISTING /tmp/ccAMtjZ3.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccAMtjZ3.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccAMtjZ3.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccAMtjZ3.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccAMtjZ3.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccAMtjZ3.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAMtjZ3.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAMtjZ3.s:74     .text:0000000000000000 __vector_11
                            *COM*:00000000000000ff bport
                            *COM*:00000000000000ff cport
                            *COM*:00000000000000ff dport
     /tmp/ccAMtjZ3.s:199    .text:00000000000000ac wait
     /tmp/ccAMtjZ3.s:247    .text:00000000000000cc main
                            *COM*:0000000000000012 servo_add
                            *COM*:0000000000000024 servo_port
                            *COM*:0000000000000024 servo_pos
                            *COM*:0000000000000012 servo_sub
     /tmp/ccAMtjZ3.s:562    .text:000000000000028c USART_Init
     /tmp/ccAMtjZ3.s:596    .text:00000000000002a4 USART_Transmit

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
